// ============================================================================
// Shape: Angel   |   src/shapes/Angel.js
// ----------------------------------------------------------------------------
// Blueprint Sections
//   0. Utility Classes & Functions
//   1. Initialization
//   2. Intro Animation Helpers & State
//   3. Drawing Functions
//   4. Gameplay Logic (placeholder)
//   5. Scoring & Feedback (placeholder)
//   6. Skins & Effects (stub)
//   7. Debugging Tools (stub)
//   8. Structural Requirements
// ============================================================================

import { Shape } from './Shape.js';

export class Angel extends Shape {
  // ===========================================================================
  // 0. Utility Classes & Functions
  // ===========================================================================
  /** smoothstep easing */
  _smooth(t) {
    return t * t * (3 - 2 * t);
  }
  /** vibrant random HSL color */
  _randColor() {
    const h = (Math.random() * 360) | 0;
    return `hsl(${h}, 80%, 70%)`;
  }

  // ===========================================================================
  // 1. Initialization
  // ===========================================================================
  constructor(x, y, size, _ignoredColor, name = 'Angel') {
    super(x, y, size, '#FFFFFF');
    this.name = name;

    // intro timing
    this.playIntro = true;
    this.introTimer = 0;
    this.introDuration = 2500;
    this.fadeInTime = 1200;

    this.isReadyToPlay = false;
    this.glintDuration = 600;
    this.sequenceDone = false;
    this.glintTime = 1800;
    this.glintDur = 1000;

    // swoop & SVG scale
    this._drawScale = 1.5;
    this._swoopHeightFactor = 3.0;
    this._vbSize = 655.35999;
    this._halfVB = this._vbSize * 0.5;

    // ← exact “d=” path from your PNG-to-SVG export
    const d = `
m 304.95999,578.33744
c -30.53864,-1.14166 -59.58829,-9.29027 -78.92685,-22.13946
-10.86309,-7.21781 -18.23597,-15.13694 -22.82287,-24.51379
-11.66534,-23.84706 -7.94338,-56.50455 10.81393,-94.8842
2.5092,-5.13411 8.19843,-15.54735 10.88629,-19.92564
1.53699,-2.50361 1.60735,-2.74271 0.5712,-1.94105
-0.41706,0.32268 -1.89306,1.46376 -3.28,2.53574
-11.47897,8.87224 -21.83772,13.36155 -30.84169,13.36627
-4.25115,0.002 -6.70847,-0.52885 -10.08702,-2.17999
-7.49319,-3.66203 -12.31938,-11.9647 -13.58763,-23.37533
-0.47259,-4.25192 -0.39381,-12.64589 0.16902,-18.0091
3.20691,-30.55894 22.0485,-75.43791 47.41251,-112.93236
2.16065,-3.19399 3.17583,-4.9561 2.90669,-5.04535
-16.10572,-5.34103 -30.65517,-13.40475 -39.82145,-22.0702
-5.16834,-4.88595 -8.44346,-9.50052 -10.21475,-14.39235
-0.77721,-2.14644 -0.69173,-2.07343 -3.81737,-3.26073
-7.88689,-2.99589 -15.65433,-12.00671 -21.64497,-25.10979
-2.24441,-4.90912 -3.04593,-7.2891 -5.11228,-15.18011
-0.87566,-3.344 -2.10691,-7.57539 -2.73611,-9.40309
-1.68662,-4.8993 -4.75648,-11.72572 -6.34469,-14.10863
-2.39714,-3.59659 -6.91128,-7.90947 -12.96195,-12.38401
-5.74164,-4.24601 -6.68145,-5.17109 -8.07079,-7.94427
-3.5648,-7.11551 -0.7591,-13.55132 8.63374,-19.80439
8.63866,-5.75099 19.41443,-9.0476 33.02101,-10.10207
20.21392,-1.56651 45.22235,2.71191 70.41604,12.04672
17.71912,6.56533 35.49367,15.56349 50.54324,25.58694
2.19079,1.45913 4.02868,2.60754 4.0842,2.55201
0.0555,-0.0555 -0.13463,-0.66306 -0.42258,-1.35008
-2.08386,-4.97204 -4.60487,-17.85543 -4.60487,-23.53276
v -2.14042 l -2.32,-0.87238 c -3.58762,-1.34904 -10.95703,-4.94994 -14.27349,-6.97443
-21.78025,-13.29548 -29.78794,-32.38679 -21.42118,-51.070764
2.99889,-6.696872 9.28075,-14.176396 16.40139,-19.528393
16.19641,-12.173494 38.59294,-19.751178 65.45328,-22.145583
6.00752,-0.535527 23.43248,-0.535527 29.44,0
19.85443,1.769879 37.40988,6.403027 51.68,13.639133
21.3765,10.839615 33.44,26.1991 33.44,42.576465
0,11.879156 -6.74747,23.615062 -18.65645,32.449252
-5.57596,4.1363 -13.287,8.36455 -19.74355,10.82613
l -2.4,0.91501 -0.21447,1.9048
c -0.11796,1.04765 -0.36441,3.34481 -0.54766,5.10481
-0.58815,5.64868 -2.77834,15.20973 -4.31787,18.84913
-0.29062,0.68702 -0.48297,1.29456 -0.42745,1.35008
0.0555,0.0555 1.89341,-1.09288 4.0842,-2.55201
38.21662,-25.45338 86.05874,-40.33834 120.95928,-37.63366
13.60659,1.05447 24.38235,4.35108 33.02102,10.10207
9.39284,6.25307 12.19853,12.68888 8.63373,19.80439
-1.38934,2.77318 -2.32915,3.69826 -8.07078,7.94427
-6.05067,4.47454 -10.56482,8.78742 -12.96195,12.38401
-1.58822,2.38291 -4.65807,9.20933 -6.34469,14.10863
-0.6292,1.8277 -1.86045,6.05909 -2.73611,9.40309
-2.06636,7.89101 -2.86788,10.27099 -5.11229,15.18011
-5.99064,13.10308 -13.75808,22.1139 -21.64496,25.10979
-3.12564,1.1873 -3.04017,1.11429 -3.81738,3.26073
-3.24973,8.97492 -12.65671,18.28021 -26.37001,26.08497
-6.16635,3.50951 -16.12868,7.87797 -23.66619,10.37758
-0.26913,0.0892 0.74605,1.85136 2.90669,5.04535
25.36402,37.49445 44.2056,82.37342 47.41252,112.93236
0.56282,5.36321 0.6416,13.75718 0.16902,18.0091
-1.26826,11.41063 -6.09444,19.7133 -13.58763,23.37533
-3.37856,1.65114 -5.83588,2.18221 -10.08702,2.17999
-9.00398,-0.005 -19.36273,-4.49403 -30.8417,-13.36627
-1.38693,-1.07198 -2.86293,-2.21306 -3.28,-2.53574
-1.03615,-0.80166 -0.96579,-0.56256 0.5712,1.94105
2.68787,4.37829 8.3771,14.79153 10.88629,19.92564
18.75731,38.37965 22.47928,71.03714 10.81394,94.8842
-4.5869,9.37685 -11.95979,17.29598 -22.82288,24.51379
-15.45189,10.26677 -36.3683,17.36615 -60.68685,20.59816
-10.15787,1.35001 -13.8897,1.50308 -38.08,1.56188
-12.936,0.0314 -24.456,0.0222 -25.6,-0.0206
z
M 273.74692,102.4
c 3.59239,-9.552604 10.20042,-19.00731 17.77307,-25.429553
11.67922,-9.904949 26.20637,-14.803961 40.32,-13.597171
9.28274,0.793724 18.75912,4.020368 25.95138,8.836273
10.65973,7.137716 19.41407,18.185349 23.97484,30.255341
1.21135,3.2058 0.82575,3.17879 4.66876,0.3271
7.82794,-5.808688 12.77237,-12.163164 14.36314,-18.459223
0.5691,-2.252419 0.62424,-5.863293 0.1258,-8.237018
-1.94165,-9.246633 -12.21246,-18.626919 -27.04743,-24.702286
-27.43459,-11.23529 -64.95838,-11.23529 -92.39297,0
-10.10744,4.139301 -18.81287,10.285056 -23.12148,16.323027
-1.72369,2.415537 -3.44521,6.089817 -3.92596,8.379259
-1.93324,9.206603 3.47702,18.855085 15.29834,27.282561
1.48192,1.05647 2.78791,1.80855 2.90218,1.67127
0.11427,-0.13727 0.61392,-1.32958 1.11033,-2.64958
z
`.trim();
    this._path = new Path2D(d);

    // prepare glint storage
    this._glints = [];
    this._spawned = false;
    this._glintCount = 60;
    this.objectiveCompleted = false;
  }

  // ===========================================================================
  // 2. Intro Animation Helpers & State
  // ===========================================================================
  update(deltaTime) {
    this.introTimer += deltaTime;
    if (this.playIntro && this.introTimer >= this.introDuration + this.glintDur) {
      this.playIntro = false;
      this.isReadyToPlay = true;
    }

    // once glint window opens, spawn all flares
    if (!this._spawned && this.introTimer >= this.glintTime) {
      for (let i = 0; i < this._glintCount; i++) {
        const delay = Math.random() * this.glintDur * 0.6;
        const life = this.glintDur * (0.6 + Math.random() * 0.4);
        this._glints.push({
          angle: Math.random() * Math.PI * 2,
          radius: Math.random() * this.size * this._drawScale * 2.2,
          size: this.size * (0.08 + Math.random() * 0.2) * this._drawScale,
          color: this._randColor(),
          start: this.glintTime + delay,
          duration: life,
        });
      }
      this._spawned = true;
    }
  }

  // ===========================================================================
  // 3. Drawing Functions
  // ===========================================================================
  draw(ctx) {
    // 3.1 — swooping Angel
    ctx.save();
    let alpha = 1,
      scale = 1,
      posY = this.y;
    if (this.playIntro) {
      const tRaw = Math.min(1, this.introTimer / this.introDuration),
        t = this._smooth(tRaw);
      alpha = Math.min(1, this.introTimer / this.fadeInTime);
      scale = t;
      const startY = this.y - this.size * this._swoopHeightFactor;
      posY = startY + (this.y - startY) * t;
    }
    ctx.globalAlpha = alpha;
    ctx.translate(this.x, posY);
    ctx.scale(scale, scale);

    const fit = (this.size * 2 * this._drawScale) / this._vbSize;
    ctx.scale(fit, fit);
    ctx.translate(-this._halfVB, -this._halfVB);

    ctx.fillStyle = this.color;
    ctx.fill(this._path);
    ctx.restore();

    // 3.2 — vibrant glints on top
    this._glints.forEach((g) => {
      const dt = this.introTimer - g.start;
      if (dt > 0 && dt < g.duration) {
        const tN = dt / g.duration,
          alphaG = tN < 0.5 ? tN * 2 : 1 - (tN - 0.5) * 2;

        // position
        const px = this.x + Math.cos(g.angle) * g.radius;
        const py = this.y + Math.sin(g.angle) * g.radius;

        ctx.save();
        ctx.globalCompositeOperation = 'lighter';
        ctx.globalAlpha = alphaG;

        // radial gradient glow
        const R = g.size * 2;
        const grad = ctx.createRadialGradient(0, 0, 0, 0, 0, R);
        grad.addColorStop(0, g.color);
        grad.addColorStop(1, 'rgba(0,0,0,0)');
        ctx.fillStyle = grad;

        ctx.translate(px, py);
        ctx.beginPath();
        ctx.arc(0, 0, R, 0, Math.PI * 2);
        ctx.fill();
        ctx.restore();
      }
    });
  }

  // ===========================================================================
  // 4. Gameplay Logic (placeholder)
  // ===========================================================================
  handleClick() {
    return false;
  }
  checkBoundary() {
    return false;
  }

  // ===========================================================================
  // 5. Scoring & Feedback (placeholder)
  // ===========================================================================
  onScoreUpdate(score) {}

  // ===========================================================================
  // 6. Skins & Effects (stub)
  // ===========================================================================
  applySkin(skin) {}

  // ===========================================================================
  // 7. Debugging Tools (stub)
  // ===========================================================================
  debugDraw(ctx) {}

  reset() {
    this.playIntro = true;
    this.introTimer = 0;
    this._spawned = false;
    this._glints = [];
    this.objectiveCompleted = false;
  }
  // ===========================================================================
  // 8. Structural Requirements
  // ===========================================================================
  get behaviorType() {
    return 'objective';
  }

  isReady() {
    return !this.playIntro;
  }

  isSequenceCompleted() {
    return this.objectiveCompleted ?? false;
  }
  resetSequence(level) {
    this.reset();
  }
}

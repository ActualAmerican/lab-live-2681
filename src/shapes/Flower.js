// ============================================================================
// Shape: Flower  |  src/shapes/Flower.js
// ----------------------------------------------------------------------------
// Blueprint Sections
//   0. Utility Classes & Functions
//   1. Initialization
//   2. Intro Animation Helpers & State
//   3. Drawing Functions
//   4. Gameplay Logic (placeholder)
//   5. Scoring & Feedback (placeholder)
//   6. Skins & Effects (stub)
//   7. Debugging Tools (stub)
// 8. Structural Requirements
// ============================================================================

import { Shape } from './Shape.js';

// 0. Utility Functions
function easeInOutSine(t) {
  return -(Math.cos(Math.PI * t) - 1) / 2;
}

export class Flower extends Shape {
  // ===========================================================================
  // 1. Initialization
  // ===========================================================================
  constructor(x, y, size, _ignoredColor, name = 'Flower') {
    super(x, y, size * 0.985, '#FF69B4');
    this.name = name;

    this._drawScale = 5;
    this._vbSize = 655.35999;
    this._halfVB = this._vbSize / 2;

    this.playIntro = true;
    this.introTimer = 0;
    this.introDuration = 1800;
    this.fadeInTime = 800;
    this.glintTime = this.introDuration;
    this.glintDuration = 700;
    this.isReadyToPlay = false;


     this._path = new Path2D(`m 320.47999,480.33594 c -4.17171,-0.74528 -5.42244,-1.09627 -9.34532,-2.62256 -9.88393,-3.84556 -19.42242,-11.98391 -26.57418,-22.67339 -3.35008,-5.00725 -6.99879,-12.47222 -9.07172,-18.56 -0.56932,-1.672 -1.0679,-3.0847 -1.10795,-3.13933 -0.0401,-0.0546 -1.92412,0.8272 -4.18682,1.95962 -17.02885,8.52249 -33.16861,10.48105 -44.11401,5.35322 -5.3628,-2.51243 -9.09382,-6.23222 -11.60148,-11.56655 -5.16157,-10.97979 -3.20624,-27.03543 5.378,-44.15991 1.06831,-2.13115 1.89763,-3.91215 1.84294,-3.95779 -0.0547,-0.0456 -0.89145,-0.3359 -1.85945,-0.64504 -0.968,-0.30914 -3.33868,-1.20232 -5.26816,-1.98486 -15.57126,-6.31517 -27.76141,-16.51337 -34.43582,-28.8088 -8.99078,-16.56256 -7.34569,-34.86543 4.55258,-50.65105 7.29722,-9.68135 19.50364,-18.12808 33.38627,-23.10301 1.93317,-0.69276 3.56216,-1.30687 3.61996,-1.36467 0.0578,-0.0578 -0.53989,-1.38935 -1.32821,-2.959 -9.59787,-19.1105 -11.13951,-36.12922 -4.3201,-47.69129 2.13566,-3.62095 6.99309,-7.70494 11.29203,-9.49404 3.83909,-1.59771 6.13895,-1.93599 13.14144,-1.93293 5.77668,0.003 7.16921,0.10321 9.92,0.71721 7.08085,1.58049 12.16935,3.38682 19.65056,6.97558 2.35981,1.13201 4.33012,2.01864 4.37846,1.97029 0.0483,-0.0483 0.65472,-1.6696 1.34748,-3.60277 4.07359,-11.36743 10.07557,-21.08496 17.62897,-28.54225 16.23177,-16.02525 37.38872,-19.5674 56.12509,-9.3966 12.29543,6.67441 22.49363,18.86456 28.8088,34.43582 0.78254,1.92948 1.66788,4.26416 1.96743,5.18816 0.29956,0.924 0.60795,1.68 0.68532,1.68 0.0774,0 1.40705,-0.63601 2.95482,-1.41335 19.068,-9.57653 36.09972,-11.11349 47.65154,-4.30013 3.62094,2.13566 7.70494,6.99309 9.49403,11.29203 1.59772,3.83909 1.936,6.13895 1.93293,13.14144 -0.003,5.77668 -0.1032,7.16921 -0.7172,9.92 -1.5805,7.08085 -3.38682,12.16935 -6.97559,19.65056 -1.132,2.35981 -2.01864,4.33012 -1.97029,4.37846 0.0483,0.0483 1.6696,0.65472 3.60278,1.34748 11.36743,4.07359 21.08495,10.07557 28.54224,17.62897 16.02526,16.23177 19.56741,37.38872 9.39661,56.12509 -6.67441,12.29543 -18.86456,22.49363 -34.43582,28.8088 -1.92949,0.78254 -4.30016,1.67572 -5.26816,1.98486 -0.968,0.30914 -1.8047,0.59935 -1.85933,0.64492 -0.0546,0.0456 0.8272,1.93416 1.95962,4.19686 8.52249,17.02885 10.48105,33.1686 5.35322,44.114 -2.51243,5.3628 -6.23222,9.09383 -11.56655,11.60148 -10.97979,5.16157 -27.03543,3.20624 -44.15991,-5.378 -2.13115,-1.06831 -3.91215,-1.89763 -3.95779,-1.84293 -0.0456,0.0547 -0.3359,0.89145 -0.64504,1.85945 -2.64777,8.29094 -7.76309,17.83618 -13.2904,24.8 -12.15987,15.32015 -29.97166,22.97838 -46.55382,20.01595 z m 16.07258,-118.10473 c 13.33596,-3.35388 23.30765,-13.97137 26.18545,-27.88129 1.09435,-5.28959 0.6299,-12.27896 -1.18747,-17.86993 -3.62605,-11.15517 -13.31584,-20.2301 -24.83354,-23.25774 -4.16852,-1.09577 -11.09803,-1.37811 -15.14711,-0.61716 -14.12103,2.65381 -24.81247,12.6337 -28.49106,26.5949 -0.66523,2.5247 -0.75813,3.5906 -0.75304,8.64 0.005,5.23609 0.0827,6.03651 0.85135,8.8 5.35984,19.27026 24.23307,30.40534 43.37542,25.59122 z`);

    // Path offsets for intro: Up → Right → Up → Left (into center)
    this.pathPoints = [
      { x: 0, y: 140 },   // Up
      { x: 120, y: 140 }, // Right
      { x: 120, y: 10 },  // Up again
      { x: 0, y: 0 }      // Left into center
    ];
  }

  // ===========================================================================
  // 2. Intro Animation Helpers & State
  // ===========================================================================
  update(deltaTime) {
    if (!this.playIntro) return;
    this.introTimer += deltaTime;
    if (this.introTimer >= this.introDuration + this.glintDuration) {
  this.playIntro = false;
  this.isReadyToPlay = true;
}

  }

  // ===========================================================================
  // 3. Drawing Functions
  // ===========================================================================
  draw(ctx) {
    ctx.save();

    const alpha = Math.min(1, this.introTimer / this.fadeInTime);
    ctx.globalAlpha = alpha;

    const t = Math.min(1, this.introTimer / this.introDuration);
    const easedT = easeInOutSine(t);
    const stepCount = this.pathPoints.length - 1;
    const step = Math.floor(easedT * stepCount);
    const stepT = (easedT * stepCount) - step;

    const from = this.pathPoints[step] || { x: 0, y: 0 };
    const to = this.pathPoints[step + 1] || { x: 0, y: 0 };

    const px = this.x - (from.x + (to.x - from.x) * stepT);
    const py = this.y - (from.y + (to.y - from.y) * stepT);

    const introRotation = easedT * Math.PI * 2;

    ctx.translate(px, py);
    ctx.rotate(introRotation);

    const scale = (this.size * this._drawScale) / this._vbSize;
    ctx.scale(scale, scale);
    ctx.translate(-this._halfVB, -this._halfVB);
    ctx.fillStyle = this.color;
    ctx.fill(this._path);

    // Glint
    const glintT = this.introTimer - this.glintTime;
    if (glintT >= 0 && glintT <= this.glintDuration) {
      const g = glintT / this.glintDuration;
      const glintX = this._vbSize * (0.1 + 0.8 * g);
      const grad = ctx.createLinearGradient(glintX - 35, 0, glintX + 35, 0);
      grad.addColorStop(0, 'rgba(255,255,255,0)');
      grad.addColorStop(0.5, 'rgba(255,255,255,0.7)');
      grad.addColorStop(1, 'rgba(255,255,255,0)');
      ctx.fillStyle = grad;
      ctx.fill(this._path);
    }

    ctx.restore();
  }

  // ===========================================================================
  // 4. Gameplay Logic (placeholder)
  // ===========================================================================
  handleClick() { return false; }
  checkBoundary() { return false; }

  // ===========================================================================
  // 5. Scoring & Feedback (placeholder)
  // ===========================================================================
  onScoreUpdate(score) {}

  // ===========================================================================
  // 6. Skins & Effects (stub)
  // ===========================================================================
  applySkin(skin) {}

  // ===========================================================================
  // 7. Debugging Tools (stub)
  // ===========================================================================
  debugDraw(ctx) {}

  reset() {
  this.playIntro = true;
  this.introTimer = 0;
  this.isReadyToPlay = false;
}
// ===========================================================================
// 8. Structural Requirements
// ===========================================================================
get behaviorType() {
  return 'survival';
}

isReady() {
  return !this.playIntro;
}

isSequenceCompleted() {
  return true;
}

}
